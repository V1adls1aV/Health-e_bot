import telebot as tb
from telebot import types
from pytesseract import image_to_string
from PIL.Image import open as open_image
from random import choice
from io import BytesIO

from objects.additive import Additive
from objects.eadditive import EAdditive
from objects.user import User, GetCurrentUser
from text_objects import AdditiveList, Composition
from data.config import TOKEN, DESCRIPTION, ADMINS, TESS_CONFIG, PREMIUMTERMS


class Admin(tb.SimpleCustomFilter):
    key = 'is_admin'
    @staticmethod
    def check(message: tb.types.Message):
        return message.chat.id in ADMINS


bot = tb.TeleBot(TOKEN, parse_mode='HTML')  # initializing bot
bot.add_custom_filter(Admin())


####################### Message handlers ########################


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–∞–≤ ‚úÖ'),
        types.KeyboardButton('–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚ùå'),
        types.KeyboardButton('–ü—Ä–µ–º–∏—É–º üëë')
        )

    GetCurrentUser(message)
    
    bot.send_message(message.chat.id, 
    DESCRIPTION.format(message.from_user.first_name), reply_markup=markup)


@bot.message_handler(commands=['distribute'], is_admin=True)
def distribute_news(message):
    mes = bot.send_message(message.chat.id, '–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.')
    bot.register_next_step_handler(mes, sending_news)


def sending_news(message):
    amount = 0
    for chat_id in User.get_chats_ids():
        try:
            bot.send_message(chat_id, message.text)
            amount += 1
        except:  # User has banned the bot
            pass

    bot.send_message(message.chat.id, 
    f'''
    –£—Å–ø–µ—à–Ω–æ.
    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {str(amount)}.
    ''')


@bot.message_handler(content_types=['text'])
def buttons_handler(message):
    if message.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–∞–≤ ‚úÖ':
        mes = bot.send_message(message.chat.id, 
        '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ—Ä–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–∞–≤–∞.')

        bot.register_next_step_handler(mes, get_composition)

    elif message.text == '–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚ùå':
        markup = types.InlineKeyboardMarkup()

        markup.add(
            types.InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫', 
            callback_data='get'),
            types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã', 
            callback_data='add'),
            types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã', 
            callback_data='del')
            )

        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)

    elif message.text == '–ü—Ä–µ–º–∏—É–º üëë':
        markup = types.InlineKeyboardMarkup()

        markup.add(
            types.InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', 
            callback_data='premium'),
            types.InlineKeyboardButton('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', 
            callback_data='question'),
            )

        bot.send_message(message.chat.id, PREMIUMTERMS, reply_markup=markup)


##################### Composition analyzing #####################


def get_composition(message):
    if message.content_type == 'text':  # Getting evalution of text
        user = GetCurrentUser(message)
        composition_analyzer(message, message.text, user)

    elif message.content_type == 'photo':  # AI
        user = GetCurrentUser(message)

        if user.premium:
            image = get_image_from_message(message)
            text = image_to_string(image, lang='rus', config=TESS_CONFIG)
            print('_________________')
            print('Text recognition:')
            print(text)
            print('_________________')
            composition_analyzer(message, text, user)

        else:
            bot.send_message(message.chat.id, 
            'This function will be avaliable if you buy the premium version.')


def get_image_from_message(message):  # Get image from server
    image_id = message.photo[-1].file_id
    image_bytes = bot.download_file(
        bot.get_file(image_id).file_path
        )
    with BytesIO(image_bytes) as stream:
        return open_image(stream).convert('RGBA')


def composition_analyzer(message, text, user):
    comp = Composition(
        user,
        text)

    markup = types.InlineKeyboardMarkup()
    for el in comp.e_additives:
        markup.add(types.InlineKeyboardButton(el, callback_data=el))
    bot.send_message(message.chat.id, comp.get_evaluation(), reply_markup=markup)


########################### Callbacks ###########################


@bot.callback_query_handler(func=lambda c: True)
def inline_buttons_handler(call):
    if call.message:
        if call.data == 'get':  # Getting all exceptions
            user = GetCurrentUser(call.message)
            additives = user.get_additives_names()

            if additives:
                bot.edit_message_text(
                    '–í–∞—à —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:\n' + ', '.join(additives) + '.',
                    call.message.chat.id, call.message.id)
            else:
                bot.edit_message_text(
                    '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.', 
                    call.message.chat.id, call.message.id)

        elif call.data == 'add':  # Adding a connection/additive
            mes = bot.edit_message_text(
                '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.', 
                call.message.chat.id, call.message.id
                )
            bot.register_next_step_handler(mes, add_item)

        elif call.data == 'del':  # Deleting connection/addititve
            mes = bot.edit_message_text(
                '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.', 
                call.message.chat.id, call.message.id
                )
            bot.register_next_step_handler(mes, del_item)

        elif call.data[0] == '–µ':
            bot.send_message(
                call.message.chat.id,
                EAdditive(call.data).get_description()
                )
        
        elif call.data == 'premium':
            admin_chat_id = choice(ADMINS)  # Getting random admin
            user = GetCurrentUser(call.message)
            
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton('‚úÖ', 
                callback_data=f'set_premium{call.message.chat.id}'),  # This is awful...
                types.InlineKeyboardButton('‚ùå', 
                callback_data=f'del_premium{call.message.chat.id}')
                )  # How to put chat_id to Inline handler
            
            bot.send_message(admin_chat_id, f'''
                –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.message.chat.username} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç premuim.
                Premium status: {user.premium}''',
                reply_markup=markup)  # Sending message to admin

            bot.send_message(call.message.chat.id, 
                '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, —Å–ø–∞—Å–∏–±–æ!')  # Message to user

        elif call.data == 'question':
            mes = bot.send_message(call.message.chat.id, '–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å:')
            bot.register_next_step_handler(mes, send_question)

        elif call.data[:12] == 'set_premium':  # This is awful...
            user = GetCurrentUser(int(call.data[12:]))
            user.premium = True

        elif call.data[:12] == 'del_premium':  # This is awful...
            user = GetCurrentUser(int(call.data[12:]))
            user.premium = False


def add_item(message):
    user = GetCurrentUser(message)
    names = user.get_additives_names()
    for additive_name in AdditiveList(message.text):
        if additive_name in names:
            bot.send_message(message.chat.id, 
            f'–≠–ª–µ–º–µ–Ω—Ç "{additive_name}" —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.')
        elif additive_name == '—á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚úÖ' or additive_name == '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–∞–≤ ‚ùå':
            buttons_handler(message)
        else:
            additive = Additive(additive_name)
            user.add_additive(additive)

            bot.send_message(message.chat.id, 
            f'–≠–ª–µ–º–µ–Ω—Ç "{additive_name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.')


def del_item(message):
    user = GetCurrentUser(message)
    names = user.get_additives_names()
    for additive_name in AdditiveList(message.text):
        if additive_name in names:
            additive = Additive(additive_name)
            user.del_additive(additive)
            
            bot.send_message(message.chat.id,
            f'–≠–ª–µ–º–µ–Ω—Ç "{additive_name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.')
        elif additive_name == '—á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚úÖ' or additive_name == '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–∞–≤ ‚ùå':
            buttons_handler(message)
        else:
            bot.send_message(message.chat.id, 
            f'–≠–ª–µ–º–µ–Ω—Ç–∞ "{additive_name}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')


def send_question(message):
    chat_id = choice(ADMINS)  # Getting random admin
    bot.send_message(chat_id, f'''
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:
        {message.text}'''
        )  # Maybe add reply for admin in the future


bot.infinity_polling()  # Running
